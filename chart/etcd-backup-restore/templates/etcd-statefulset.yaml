apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-etcd
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: etcd
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  updateStrategy:
    type: RollingUpdate
  serviceName: {{ .Release.Name }}-etcd-peer
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: etcd
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/configmap-etcd: {{ include (print $.Template.BasePath "/etcd-configmap.yaml") . | sha256sum }}
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
      labels:
        app.kubernetes.io/name: etcd
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
{{- if and .Values.backup.storageProvider (eq .Values.backup.storageProvider "Local") }}
      initContainers:
      - args: 
        - chown -R 65532:65532 /home/nonroot/{{ .Values.backup.storageContainer}}
        command:
        - sh
        - -c
        - --
        name: change-backup-bucket-permissions
        image: {{ .Values.images.initContainer.repository }}:{{ .Values.images.initContainer.tag }}
        imagePullPolicy: {{ .Values.images.initContainer.pullPolicy }}
        volumeMounts:
        - name: local-backup
          mountPath: /home/nonroot/{{ .Values.backup.storageContainer}}
        securityContext:
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
{{- end }}
      containers:
      - args: 
        - start-etcd
        - --backup-restore-host-port=localhost:{{ .Values.servicePorts.backupRestore }}
        - --etcd-server-name=localhost
{{- if .Values.etcdTLS }}
        - --backup-restore-tls-enabled=true
        - --backup-restore-ca-cert-bundle-path=/var/etcdbr/ssl/ca/bundle.crt
        - --etcd-client-cert-path=/var/etcd/ssl/client/tls.crt
        - --etcd-client-key-path=/var/etcd/ssl/client/tls.key
{{- else }}
        - --backup-restore-tls-enabled=false
{{- end }}
        name: etcd
        image: {{ .Values.images.etcd.repository }}:{{ .Values.images.etcd.tag }}
        imagePullPolicy: {{ .Values.images.etcd.pullPolicy }}
        readinessProbe:
          httpGet:
{{- if .Values.backupRestoreTLS }}
            scheme: HTTPS
{{- else }}
            scheme: HTTP
{{- end }}
            path: /healthz
            port: {{ .Values.servicePorts.backupRestore }}
          initialDelaySeconds: 15
          periodSeconds: 5
          failureThreshold: 5
        ports:
        - containerPort: {{ .Values.servicePorts.server }}
          name: server
          protocol: TCP
        - containerPort: {{ .Values.servicePorts.client }}
          name: client
          protocol: TCP
        resources:
{{ toYaml .Values.resources.etcd | indent 10 }}
        volumeMounts:
        - name: {{ .Release.Name }}-etcd
          mountPath: /var/etcd/data/
{{- if .Values.etcdTLS }}
        - name: etcd-ca
          mountPath: /var/etcd/ssl/ca
        - name: etcd-server-tls
          mountPath: /var/etcd/ssl/server
        - name: etcd-client-tls
          mountPath: /var/etcd/ssl/client
{{- end }}
{{- if .Values.backupRestoreTLS }}
        - name: backup-restore-ca
          mountPath: /var/etcdbr/ssl/ca
{{- end }}
      - name: backup-restore
        args:
        - server
{{- if .Values.backup.storageProvider}}
        # Snapstore flags
        - --storage-provider={{ .Values.backup.storageProvider }}
        - --store-prefix={{ .Release.Name }}-etcd
        # Snapshot flags
        - --schedule={{ .Values.backup.schedule }}
        - --delta-snapshot-period={{ .Values.backup.deltaSnapshotPeriod }}
        - --delta-snapshot-memory-limit={{ int $.Values.backup.deltaSnapshotMemoryLimit }}
        # GC flags
        - --garbage-collection-policy={{ .Values.backup.garbageCollectionPolicy }}
  {{- if eq .Values.backup.garbageCollectionPolicy "LimitBased" }}
        - --max-backups={{ .Values.backup.maxBackups }}
  {{- end }}
        - --garbage-collection-period={{ .Values.backup.garbageCollectionPeriod }}
        # Snapshot compression and timeout flags
  {{- if .Values.backup.compression }}
    {{- if .Values.backup.compression.enabled }}
        - --compress-snapshots={{ .Values.backup.compression.enabled }}
    {{- end }}
    {{- if .Values.backup.compression.policy }}        
        - --compression-policy={{ .Values.backup.compression.policy }}
    {{- end }}
  {{- end }}
        - --etcd-snapshot-timeout={{ .Values.backup.etcdSnapshotTimeout }}
{{- end }}
        # Defragmentation flags
{{- if .Values.backup.defragmentationSchedule }}
        - --defragmentation-schedule={{ .Values.backup.defragmentationSchedule }}
{{- end }}
        - --etcd-defrag-timeout={{ .Values.backup.etcdDefragTimeout}}
        # Compaction flags
{{- if .Values.autoCompaction }}
  {{- if .Values.autoCompaction.mode }}
        - --auto-compaction-mode={{ .Values.autoCompaction.mode }}
  {{- end }}
  {{- if .Values.autoCompaction.retentionLength }}
        - --auto-compaction-retention={{ .Values.autoCompaction.retentionLength }}
  {{- end }}
{{- end }}
        # Client and Backup TLS command line flags
{{- if .Values.etcdTLS }}
        - --cacert=/var/etcd/ssl/ca/bundle.crt
        - --cert=/var/etcd/ssl/client/tls.crt
        - --key=/var/etcd/ssl/client/tls.key
        - --insecure-transport=false
        - --insecure-skip-tls-verify=false
        - --endpoints=https://{{ .Release.Name }}-etcd-0:{{ .Values.servicePorts.client }}
{{ else }}
        - --insecure-transport=true
        - --insecure-skip-tls-verify=true
        - --endpoints=http://{{ .Release.Name }}-etcd-0:{{ .Values.servicePorts.client }}
{{- end }}
{{- if .Values.backupRestoreTLS }}
        - --server-cert=/var/etcdbr/ssl/server/tls.crt
        - --server-key=/var/etcdbr/ssl/server/tls.key
{{- end }}
        # Other flags
        - --data-dir=/var/etcd/data/new.etcd
        - --restoration-temp-snapshots-dir=/var/etcd/data/restoration.tmp
        - --snapstore-temp-directory=/var/etcd/data/temp
{{- if .Values.backup.etcdQuotaBytes }}
        - --embedded-etcd-quota-bytes={{ int $.Values.backup.etcdQuotaBytes }}
{{- end }}
        - --etcd-connection-timeout={{ .Values.backup.etcdConnectionTimeout }}
        - --use-etcd-wrapper=true
{{- if and .Values.etcdAuth.username .Values.etcdAuth.password }}
        - --etcd-username={{ .Values.etcdAuth.username }}
        - --etcd-password={{ .Values.etcdAuth.password }}
{{- end }}
        image: {{ .Values.images.etcdBackupRestore.repository }}:{{ .Values.images.etcdBackupRestore.tag }}
        imagePullPolicy: {{ .Values.images.etcdBackupRestore.pullPolicy }}
        ports:
        - containerPort: {{ .Values.servicePorts.backupRestore }}
          name: server
          protocol: TCP
        resources:
{{ toYaml .Values.resources.backup | indent 10 }}
        env:
        - name: "POD_NAME"
          value: {{ .Release.Name }}-etcd-0
        - name: "POD_NAMESPACE"
          value: {{ .Release.Namespace }}
        - name: STORAGE_CONTAINER
          value: {{ .Values.backup.storageContainer }}
{{- if .Values.backup.storageProvider }}
  {{- if eq .Values.backup.storageProvider "S3" }}
        - name: "AWS_APPLICATION_CREDENTIALS"
          value: "/var/etcd-backup"
    {{- if .Values.backup.s3.endpoint }}
        - name: "AWS_ENDPOINT_URL_S3"
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-etcd-backup
              key: "endpoint"
              optional: true
    {{- end }}
  {{- else if eq .Values.backup.storageProvider "ABS" }}
        - name: "AZURE_APPLICATION_CREDENTIALS"
          value: "/var/etcd-backup"
  {{- else if eq .Values.backup.storageProvider "GCS" }}
        - name: "GOOGLE_APPLICATION_CREDENTIALS"
          value: "/var/.gcp/serviceaccount.json"
  {{- else if eq .Values.backup.storageProvider "Swift" }}
        - name: "OPENSTACK_APPLICATION_CREDENTIALS"
          value: "/var/etcd-backup"
  {{- else if eq .Values.backup.storageProvider "OSS" }}
        - name: "ALICLOUD_APPLICATION_CREDENTIALS"
          value: "/var/etcd-backup"
  {{- else if eq .Values.backup.storageProvider "ECS" }}
        - name: "ECS_ENDPOINT"
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-etcd-backup
              key: "endpoint"
        - name: "ECS_ACCESS_KEY_ID"
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-etcd-backup
              key: "accessKeyID"
        - name: "ECS_SECRET_ACCESS_KEY"
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-etcd-backup
              key: "secretAccessKey"
    {{- if .Values.backup.ecs.disableSsl }}
        - name: "ECS_DISABLE_SSL"
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-etcd-backup
              key: "disableSsl"
              optional: true
    {{- end }}
    {{- if .Values.backup.ecs.insecureSkipVerify }}
        - name: "ECS_INSECURE_SKIP_VERIFY"
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-etcd-backup
              key: "insecureSkipVerify"
              optional: true
    {{- end }}
  {{- end }}
{{- end }}
        volumeMounts:
        - name: {{ .Release.Name }}-etcd
          mountPath: /var/etcd/data/
        - name: etcd-config-file
          mountPath: /var/etcd/config/
{{- if .Values.etcdTLS }}
        - name: etcd-ca
          mountPath: /var/etcd/ssl/ca
        - name: etcd-client-tls
          mountPath: /var/etcd/ssl/client
{{- end }}
{{- if .Values.backupRestoreTLS }}
        - name: backup-restore-server-tls
          mountPath: /var/etcdbr/ssl/server
{{- end }}
{{- if .Values.backup.storageProvider }}
  {{- if eq .Values.backup.storageProvider "Local"}}
        - name: local-backup
          mountPath: /home/nonroot/{{ .Values.backup.storageContainer}}
  {{- else if eq .Values.backup.storageProvider "GCS" }}
        - name: etcd-backup
          mountPath: "/var/.gcp/"
  {{- else }}
        - name: etcd-backup
          mountPath: "/var/etcd-backup/"
  {{- end }}
{{- end }}
      securityContext:
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
        fsGroup: 65532
      shareProcessNamespace: true
      volumes:
      - name: etcd-config-file
        configMap:
          name: {{ .Release.Name }}-etcd-config
          defaultMode: 0640
          items:
          - key: etcd.conf.yaml
            path: etcd.conf.yaml
{{- if .Values.etcdTLS }}
      - name: etcd-ca
        secret:
          secretName: {{ .Release.Name }}-etcd-ca
      - name: etcd-server-tls
        secret:
          secretName: {{ .Release.Name }}-etcd-server-tls
      - name: etcd-client-tls
        secret:
          secretName: {{ .Release.Name }}-etcd-client-tls
{{- end }}
{{- if .Values.backupRestoreTLS }}
      - name: backup-restore-ca
        secret:
          secretName: {{ .Release.Name }}-etcdbr-ca
      - name: backup-restore-server-tls
        secret:
          secretName: {{ .Release.Name }}-etcdbr-server-tls
      - name: backup-restore-client-tls
        secret:
          secretName: {{ .Release.Name }}-etcdbr-client-tls
{{- end }}
{{- if .Values.backup.storageProvider }}
  {{- if eq .Values.backup.storageProvider "Local"}}
      - name: local-backup
        hostPath:
          path: {{ .Values.backup.local.path }}/{{ .Values.backup.storageContainer }}
          type: Directory
  {{- else }}
      - name: etcd-backup
        secret:
          secretName: {{ .Release.Name }}-etcd-backup
  {{- end }}
{{- end }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-etcd
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: {{ .Values.storageCapacity }}   