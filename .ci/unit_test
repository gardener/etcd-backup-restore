#!/usr/bin/env bash
# Copyright (c) 2018 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
set -e

# For the test step concourse will set the following environment variables:
# SOURCE_PATH - path to component repository root directory.
READLINK_BIN="readlink"
if [[ $(uname) == 'Darwin' ]]; then
  READLINK_BIN="greadlink"
fi

# Set SOURCE_PATH if not already set
SOURCE_PATH="${SOURCE_PATH:-$(dirname "$0")/..}"
SOURCE_PATH=$(${READLINK_BIN} -f "${SOURCE_PATH}")
export SOURCE_PATH

cd "${SOURCE_PATH}"

# Install Ginkgo (test framework) to be able to execute the tests.
go install github.com/onsi/ginkgo/v2/ginkgo

###############################################################################

test_with_coverage() {
  echo "[INFO] Test coverage is enabled."
  local output_dir=test/output
  local coverprofile_file=coverprofile.out
  mkdir -p "${output_dir}"
  ginkgo "${GINKGO_COMMON_FLAGS[@]}" -gcflags=all=-d=checkptr=0 --coverprofile "${coverprofile_file}" -covermode=set -outputdir "${output_dir}" ${TEST_PACKAGES}
  sed -i='' '/mode: set/d' "${output_dir}/${coverprofile_file}"
  { echo "mode: set"; cat "${output_dir}/${coverprofile_file}"; } > "${output_dir}/${coverprofile_file}.temp"
  mv "${output_dir}/${coverprofile_file}.temp" "${output_dir}/${coverprofile_file}"
  go tool cover -func "${output_dir}/${coverprofile_file}"
}

################################################################################

# To run a specific package, run TEST_PACKAGES=<PATH_TO_PACKAGE> make test
TEST_PACKAGES="${TEST_PACKAGES:-"cmd pkg"}"

RUN_NEGATIVE="${RUN_NEGATIVE:-"true"}"

GINKGO_COMMON_FLAGS="-r -timeout=1h0m0s --show-node-events --fail-on-pending -mod=vendor"

if [[ "${COVER:-false}" == "false" ]]; then
  echo "[INFO] Test coverage is disabled."

  # Run all non-negative scenarios with randomize-all parameters.
  ginkgo -race -trace $GINKGO_COMMON_FLAGS -gcflags=all=-d=checkptr=0 --randomize-all --randomize-suites --skip="NEGATIVE\:.*" $TEST_PACKAGES

  if [[ "${RUN_NEGATIVE}" == "true" ]]; then
    echo "[INFO] Running negative tests now..."
    # Run negative scenarios sequentially (removed failOnPending as one spec in restore test is marked as 'X' for excluding)
    ginkgo -race -trace $GINKGO_COMMON_FLAGS -gcflags=all=-d=checkptr=0 --focus="NEGATIVE\:.*" ${TEST_PACKAGES}
  fi

else
  test_with_coverage
fi
echo "Finished executing unit tests."
